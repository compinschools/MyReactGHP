{"version":3,"sources":["Add.js","Dashboard.js","apiClient.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Add","props","useState","disabled","cDisabled","currentAd","onSubmit","e","preventDefault","client","updateAd","_id","target","adName","value","price","addAd","then","document","getElementById","reset","refreshList","catch","alert","submitHandler","id","type","defaultValue","name","Dashboard","ads","cAds","undefined","current","cCurrent","getAds","response","data","useEffect","map","key","onClick","removeAd","url","ApiClient","token","logoutHandler","this","method","axios","headers","authorization","error","status","Promise","reject","userName","password","apiCall","authenticatedCall","Login","console","log","login","username","loggedIn","App","window","localStorage","getItem","changeToken","removeItem","newToken","setItem","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d406349f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Add(props) {\n  const [disabled, cDisabled] = useState(false);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    cDisabled(true);\n    let result;\n    if (props.currentAd) {\n      result = props.client.updateAd(\n        props.currentAd._id,\n        e.target.adName.value,\n        e.target.price.value\n      );\n    } else {\n      result = props.client.addAd(e.target.adName.value, e.target.price.value);\n    }\n    result\n      .then(() => {\n        cDisabled(false);\n        document.getElementById(\"addForm\").reset();\n        props.refreshList();\n      })\n      .catch(() => {\n        alert(\"an error occured, please try again\");\n        cDisabled(false);\n      });\n  };\n\n  return (\n    <>\n      {props.currentAd ? \"Update\" : \"Add\"}\n      <br />\n\n      <form onSubmit={(e) => submitHandler(e)} id=\"addForm\">\n        Name: <br />\n        <input\n          type=\"text\"\n          defaultValue={props.currentAd?.name}\n          name=\"adName\"\n          disabled={disabled}\n        />\n        <br />\n        Price:\n        <br />\n        <input\n          type=\"text\"\n          defaultValue={props.currentAd?.price}\n          name=\"price\"\n          disabled={disabled}\n        />\n        <br />\n        <br />\n        <button type=\"submit\" disabled={disabled}>\n          {\" \"}\n          Submit{\" \"}\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default Add;\n","import React, { useState, useEffect } from \"react\";\nimport Add from \"./Add\";\n\nfunction Dashboard(props) {\n  const [ads, cAds] = useState([]);\n  const [current, cCurrent] = useState(undefined);\n\n  const refreshList = () => {\n    props.client.getAds().then((response) => cAds(response.data));\n  };\n\n  const removeAdvert = (id) => {\n    props.client.removeAd(id).then(() => refreshList());\n  };\n\n  const updateAdvert = (ad) => {\n    cCurrent(ad);\n  };\n\n  useEffect(() => {\n    refreshList();\n  }, []);\n\n  const buildrows = () => {\n    return ads.map((current) => {\n      return (\n        <tr key={current._id}>\n          <td>{current.name}</td>\n          <td>Â£{current.price}</td>\n          <td>\n            <button onClick={() => removeAdvert(current._id)}> remove</button>\n            <button onClick={() => updateAdvert(current)}> update</button>\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  return (\n    <>\n      Dashboard\n      <br />\n      <table>\n        <thead>\n          <tr>\n            <th>Advert Name</th>\n            <th>Price</th>\n          </tr>\n        </thead>\n        <tbody>{buildrows()}</tbody>\n      </table>\n      <br />\n      <br />\n      <Add\n        client={props.client}\n        refreshList={() => {\n          refreshList();\n          cCurrent(undefined);\n        }}\n        currentAd={current}\n      />\n    </>\n  );\n}\n\nexport default Dashboard;\n","import axios from \"axios\";\nconst url = \"http://localhost:3001/\";\n\nexport class ApiClient {\n\n  constructor(token,logoutHandler) {\n    this.token = token;\n    this.logoutHandler = logoutHandler;\n  }\n\n  authenticatedCall(method, url, data) {\n    return axios({\n      method,\n      url,\n      headers: {\n        authorization: this.token\n      },\n      data,\n    }).catch((error) => {\n      if(error.response.status == 403) {\n        //logout the user\n        this.logoutHandler();\n        return Promise.reject();\n      } else {\n      throw error;\n      }\n    });\n  } \n\n  apiCall(method, url, data) {\n    return axios({\n      method,\n      url,\n      data,\n    }).catch((error) => {\n      throw error;\n    });\n  }\n\n  login(userName,password){\n    return this.apiCall(\"post\",`${url}auth`,{userName: userName,password: password})\n  }\n\n  getAds() {\n    return this.authenticatedCall(\"get\", url);\n  }\n\n  addAd(name, price) {\n    return this.authenticatedCall(\"post\", url, { name, price });\n  }\n\n  removeAd(id) {\n    return this.authenticatedCall(\"delete\", `${url}${id}`);\n  }\n\n  updateAd(id, name, price) {\n    return this.authenticatedCall(\"put\", `${url}${id}`, { name, price });\n  }\n}\n","import React, { useState } from \"react\";\n\nfunction Login(props) {\n  \n  const [disabled, cDisabled] = useState(false);\n\n  const submitHandler = (e) => {\n    console.log(\"submit\");\n    e.preventDefault();\n    cDisabled(true);\n    props.client\n    .login(e.target.username.value,e.target.password.value)\n    .then( (response) => {\n      cDisabled(false);\n      props.loggedIn(response.data.token);\n    })\n    .catch( (error) => {\n      alert(\"an error has occurred, please try again later\");\n      console.log(\"Login error\", error);\n      cDisabled(false);\n    })\n  };\n\n  return (\n    <>\n      Login\n      <br />\n      <form onSubmit={(e) => submitHandler(e)}>\n        username\n        <br />\n        <input type=\"text\" name=\"username\" disabled={disabled} />\n        <br />\n        password\n        <br />\n        <input type=\"password\" name=\"password\" disabled={disabled} />\n        <br />\n        <br />\n        <button type=\"submit\" disabled={disabled}>\n          {\" \"}\n          Submit{\" \"}\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport Dashboard from \"./Dashboard\";\nimport { ApiClient } from \"./apiClient\";\nimport Login from \"./Login\";\n\nfunction App() {\n  const [token,changeToken] = useState(window.localStorage.getItem(\"token\"));\n  \n  const login = (newToken) => {\n    window.localStorage.setItem(\"token\",newToken)\n    changeToken(newToken);\n  }\n\n  const logout = () => {\n    window.localStorage.removeItem(\"token\")\n    changeToken(undefined);\n  }\n  const client = new ApiClient(token,logout);\n\n  return (\n    <>\n      { token ? ( \n      <Dashboard client={client} />\n      ): (\n        <Login loggedIn={login} client={client} />\n      )\n      }  \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}